{"version":3,"sources":["webpack:///./src/app/features/maps/maps.component.html","webpack:///./src/app/features/maps/maps.component.ts","webpack:///./src/app/features/maps/maps.module.ts","webpack:///./src/app/features/maps/maps.routing.ts","webpack:///./src/app/features/maps/shared/google-api.service.ts","webpack:///./src/app/features/maps/shared/map-style.service.ts"],"names":[],"mappings":"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","file":"features-maps-maps-module.js","sourcesContent":["module.exports = \"<div id=\\\"content\\\">\\n  <div class=\\\"row\\\">\\n    <sa-big-breadcrumbs [items]=\\\"['Google Map', 'Custom Skins']\\\" icon=\\\"map-marker\\\"\\n                        class=\\\"col-xs-12 col-sm-7 col-md-7 col-lg-4\\\"></sa-big-breadcrumbs>\\n    <sa-stats class=\\\"hidden-3xs\\\"></sa-stats>\\n  </div>\\n\\n\\n  <div class=\\\"row\\\">\\n    <div class=\\\"col-xs-12\\\">\\n      <button class=\\\"btn btn-default\\\" [ngClass]=\\\"{active: activeStyle == style}\\\" (click)=\\\"setStyle(style)\\\"\\n              *ngFor=\\\"let style of styles\\\">{{style.name}}\\n      </button>\\n    </div>\\n    <hr>\\n  </div>\\n  <!-- @link: widgetGrid directive  -->\\n  <sa-widgets-grid >\\n    <!-- row -->\\n    <div class=\\\"row\\\">\\n      <!-- NEW WIDGET START -->\\n      <article class=\\\"col-xs-12 col-sm-12 col-md-12 col-lg-12\\\">\\n        <!-- @link: jarvisWidget -->\\n        <div sa-widget   [editbutton]=\\\"false\\\" [deletebutton]=\\\"false\\\" [fullscreenbutton]=\\\"false\\\" color=\\\"white\\\">\\n          <header>\\n            <span class=\\\"widget-icon\\\"> <i class=\\\"fa fa-map-marker\\\"></i> </span>\\n            <h2>Map demo</h2>\\n          </header>\\n          <!-- widget div-->\\n          <div   >\\n            <!-- widget content -->\\n            <div class=\\\"widget-body no-padding\\\" >\\n\\n              <div id=\\\"map-canvas\\\"  >\\n\\n              </div>\\n            </div>\\n            <!-- end widget content data-gmap-src=\\\"xml/gmap/pins.xml\\\" -->\\n          </div>\\n          <!-- end widget div -->\\n        </div>\\n        <!-- end widget -->\\n      </article>\\n      <!-- WIDGET END -->\\n    </div>\\n    <!-- end row -->\\n  </sa-widgets-grid>\\n  <!-- end widget grid -->\\n</div>\\n\"","import {Component, OnInit, OnDestroy} from '@angular/core';\nimport { GoogleAPIService } from '@app/features/maps/shared/google-api.service';\nimport { MapStyleService } from '@app/features/maps/shared/map-style.service';\n\ndeclare var google: any;\n\n@Component({\n  selector: 'sa-maps',\n  templateUrl: './maps.component.html',\n})\nexport class MapsComponent implements OnInit, OnDestroy {\n\n  public styles = [\n    {key: 'colorful', name: 'Colorful', url: '/maps/colorful.json'},\n    {key: 'greyscale', name: 'Greyscale', url: '/maps/greyscale.json'},\n    {key: 'metro', name: 'Metro', url: '/maps/metro.json'},\n    {key: 'mono-color', name: 'Mono-color', url: '/maps/mono-color.json'},\n    {key: 'monochrome', name: 'Monochrome', url: '/maps/monochrome.json'},\n    {key: 'nightvision', name: 'Nightvision', url: '/maps/nightvision.json'},\n    {\n      key: 'nightvision-highlight',\n      name: 'Nightvision Highlight',\n      url: '/maps/nightvision-highlight.json'\n    },\n    {key: 'old-paper', name: 'Old Paper', url: '/maps/old-paper.json'}\n  ];\n\n\n  public activeStyle: any;\n\n  public map: any;\n\n  constructor(private apiService:GoogleAPIService, private styleService: MapStyleService) {\n\n  }\n\n  ngOnInit() {\n    this.activeStyle = this.styles[0];\n\n    this.apiService.loadAPI.then((google: any)=>{\n      this.map = new google.maps.Map(document.getElementById('map-canvas'), {\n        center: {lat: -34.397, lng: 150.644},\n        zoom: 8\n      });\n\n      this.fetchStyle(this.activeStyle)\n    })\n  }\n\n  ngOnDestroy(){\n  }\n\n  setStyle(style) {\n    this.activeStyle = style;\n    this.fetchStyle(style)\n  }\n\n  fetchStyle(style) {\n    this.styleService.fetchStyle(style).subscribe((styleDef)=>{\n      this.map.mapTypes.set(style.key,\n        new google.maps.StyledMapType(styleDef,\n          {name: style.name})\n      );\n      this.map.setMapTypeId(style.key);\n    })\n  }\n\n}\n","\n\nimport {NgModule} from \"@angular/core\";\nimport {MapsComponent} from \"./maps.component\";\nimport {MapStyleService} from \"./shared/map-style.service\";\nimport {GoogleAPIService} from \"./shared/google-api.service\";\nimport {routing} from \"./maps.routing\";\nimport { SharedModule } from \"@app/shared/shared.module\";\n\n@NgModule({\n  imports: [routing, SharedModule],\n  declarations: [MapsComponent],\n  exports: [MapsComponent],\n  providers: [GoogleAPIService, MapStyleService],\n})\nexport class MapsModule{}\n","\nimport {ModuleWithProviders} from \"@angular/core\"\nimport {RouterModule, Routes} from \"@angular/router\";\nimport {MapsComponent} from \"./maps.component\";\n\n\nexport const routes:Routes = [\n\n  {\n    path: '',\n    component: MapsComponent\n  },\n\n];\n\nexport const routing = RouterModule.forChild(routes);\n","import {Injectable} from '@angular/core';\n\n\nimport {config} from '@app/core/smartadmin.config'\n\nconst url = 'https://maps.googleapis.com/maps/api/js?key=' + config.GOOGLE_API_KEY + '&callback=__onGoogleLoaded'\n\n\n@Injectable()\nexport class GoogleAPIService {\n\n  public loadAPI:Promise<any>;\n\n  constructor() {\n    if (window['google']) {\n      this.loadAPI = Promise.resolve(window['google'])\n    } else {\n      this.loadAPI = new Promise((resolve) => {\n        window['__onGoogleLoaded'] = (ev) => {\n          console.log('google.maps loaded');\n          resolve(window['google']);\n        };\n        this.loadScript()\n      })\n    }\n  }\n\n  loadScript() {\n    let node = document.createElement('script');\n    node.src = url;\n    node.type = 'text/javascript';\n    document.getElementsByTagName('head')[0].appendChild(node);\n\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {Observable} from 'rxjs'\nimport { JsonApiService } from '@app/core/services';\n\n\n@Injectable()\nexport class MapStyleService {\n\n\n  constructor(private jsonApiService:JsonApiService) {  }\n\n\n  fetchStyle(style):Observable<any> {\n    return this.jsonApiService.fetch(style.url)\n  }\n\n}\n"],"sourceRoot":""}